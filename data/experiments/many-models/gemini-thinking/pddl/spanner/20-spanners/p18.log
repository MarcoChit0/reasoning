2025-08-05 16:48:13,448 - INFO - Processing task: Task(domain=spanner, instance=p18)
2025-08-05 16:48:13,448 - INFO - Using model: gemini-2.5-flash-preview-05-20
2025-08-05 16:48:13,449 - INFO - Generation parameters: {'max_output_tokens': 32000, 'top_p': 0.95, 'temperature': 1.0, 'top_k': 64, 'thinking_config': {'thinking_budget': -1}, 'tool_config': None}
2025-08-05 16:48:13,453 - INFO - Prompt:
<prompt>
<problem-description>
You are a highly-skilled professor in AI planning. Your task is to generate a plan for a PDDL instance from the domain <domain>spanner</domain>. You will be given the PDDL domain file and the PDDL instance file, and you need to return the plan between the tags <plan> and </plan>. You will receive two examples to help you in generating the plan.
</problem-description> 

This is the PDDL domain file of the spanner domain:
<domain-file>
(define (domain spanner)
(:requirements :typing :strips)
(:types
location locatable - object
man nut spanner - locatable
)
(:predicates
(at ?m - locatable ?l - location)
(carrying ?m - man ?s - spanner)
(useable ?s - spanner)
(link ?l1 - location ?l2 - location)
(tightened ?n - nut)
(loose ?n - nut))
(:action walk
:parameters (?start - location ?end - location ?m - man)
:precondition (and (at ?m ?start)
(link ?start ?end))
:effect (and (not (at ?m ?start)) (at ?m ?end)))
(:action pickup_spanner
:parameters (?l - location ?s - spanner ?m - man)
:precondition (and (at ?m ?l)
(at ?s ?l))
:effect (and (not (at ?s ?l))
(carrying ?m ?s)))
(:action tighten_nut
:parameters (?l - location ?s - spanner ?m - man ?n - nut)
:precondition (and (at ?m ?l)
(at ?n ?l)
(carrying ?m ?s)
(useable ?s)
(loose ?n))
:effect (and (not (loose ?n))(not (useable ?s)) (tightened ?n)))
)
</domain-file>

This is the PDDL instance file, for which you need to generate a plan:
<instance-file>
(define (problem prob)
(:domain spanner)
(:objects
bob - man
spanner1 spanner2 spanner3 spanner4 spanner5 spanner6 spanner7 spanner8 spanner9 spanner10 spanner11 spanner12 spanner13 spanner14 spanner15 spanner16 spanner17 spanner18 spanner19 spanner20 - spanner
nut1 nut2 nut3 nut4 nut5 nut6 nut7 nut8 nut9 nut10 nut11 nut12 nut13 nut14 nut15 nut16 nut17 nut18 nut19 nut20 - nut
location1 location2 location3 location4 location5 location6 location7 location8 location9 location10 location11 location12 location13 location14 location15 location16 location17 location18 location19 location20 location21 - location
shed gate - location
)
(:init
(at bob shed)
(at spanner1 location2)
(useable spanner1)
(at spanner2 location3)
(useable spanner2)
(at spanner3 location3)
(useable spanner3)
(at spanner4 location12)
(useable spanner4)
(at spanner5 location6)
(useable spanner5)
(at spanner6 location10)
(useable spanner6)
(at spanner7 location9)
(useable spanner7)
(at spanner8 location20)
(useable spanner8)
(at spanner9 location7)
(useable spanner9)
(at spanner10 location20)
(useable spanner10)
(at spanner11 location2)
(useable spanner11)
(at spanner12 location19)
(useable spanner12)
(at spanner13 location6)
(useable spanner13)
(at spanner14 location14)
(useable spanner14)
(at spanner15 location21)
(useable spanner15)
(at spanner16 location13)
(useable spanner16)
(at spanner17 location17)
(useable spanner17)
(at spanner18 location12)
(useable spanner18)
(at spanner19 location18)
(useable spanner19)
(at spanner20 location15)
(useable spanner20)
(loose nut1)
(at nut1 gate)
(loose nut2)
(at nut2 gate)
(loose nut3)
(at nut3 gate)
(loose nut4)
(at nut4 gate)
(loose nut5)
(at nut5 gate)
(loose nut6)
(at nut6 gate)
(loose nut7)
(at nut7 gate)
(loose nut8)
(at nut8 gate)
(loose nut9)
(at nut9 gate)
(loose nut10)
(at nut10 gate)
(loose nut11)
(at nut11 gate)
(loose nut12)
(at nut12 gate)
(loose nut13)
(at nut13 gate)
(loose nut14)
(at nut14 gate)
(loose nut15)
(at nut15 gate)
(loose nut16)
(at nut16 gate)
(loose nut17)
(at nut17 gate)
(loose nut18)
(at nut18 gate)
(loose nut19)
(at nut19 gate)
(loose nut20)
(at nut20 gate)
(link shed location1)
(link location21 gate)
(link location1 location2)
(link location2 location3)
(link location3 location4)
(link location4 location5)
(link location5 location6)
(link location6 location7)
(link location7 location8)
(link location8 location9)
(link location9 location10)
(link location10 location11)
(link location11 location12)
(link location12 location13)
(link location13 location14)
(link location14 location15)
(link location15 location16)
(link location16 location17)
(link location17 location18)
(link location18 location19)
(link location19 location20)
(link location20 location21)
)
(:goal
(and
(tightened nut1)
(tightened nut2)
(tightened nut3)
(tightened nut4)
(tightened nut5)
(tightened nut6)
(tightened nut7)
(tightened nut8)
(tightened nut9)
(tightened nut10)
(tightened nut11)
(tightened nut12)
(tightened nut13)
(tightened nut14)
(tightened nut15)
(tightened nut16)
(tightened nut17)
(tightened nut18)
(tightened nut19)
(tightened nut20)
)))
</instance-file>

This is the PDDL domain file of another domain, called Storage, which serves as an example:
<domain-file-storage-example>
(define (domain Storage-Propositional)
    (:requirements :typing)
    (:types
        hoist crate place area - object
        container depot - place
        storearea transitarea - area
    )

    (:predicates
        (clear ?s - storearea)
        (in ?x -
            (either storearea crate) ?p - place)
        (available ?h - hoist)
        (lifting ?h - hoist ?c - crate)
        (at ?h - hoist ?a - area)
        (on ?c - crate ?s - storearea)
        (connected ?a1 ?a2 - area)
        (compatible ?c1 ?c2 - crate)
    )

    (:action lift
        :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
        :precondition (and
            (connected ?a1 ?a2)
            (at ?h ?a2)
            (available ?h)
            (on ?c ?a1)
            (in ?a1 ?p))
        :effect (and
            (not (on ?c ?a1))
            (clear ?a1)
            (not (available ?h))
            (lifting ?h ?c)
            (not (in ?c ?p)))
    )

    (:action drop
        :parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
        :precondition (and
            (connected ?a1 ?a2)
            (at ?h ?a2)
            ( lifting ?h ?c)
            (clear ?a1)
            (in ?a1 ?p))
        :effect (and
            (not (lifting ?h ?c))
            (available ?h)
            (not (clear ?a1))
            (on ?c ?a1)
            (in ?c ?p))
    )

    (:action move
        :parameters (?h - hoist ?from ?to - storearea)
        :precondition (and
            (at ?h ?from)
            (clear ?to)
            (connected ?from ?to))
        :effect (and
            (not (at ?h ?from))
            (at ?h ?to)
            (not (clear ?to))
            (clear ?from))
    )

    (:action go-out
        :parameters (?h - hoist ?from - storearea ?to - transitarea)
        :precondition (and
            (at ?h ?from)
            (connected ?from ?to))
        :effect (and
            (not (at ?h ?from))
            (at ?h ?to)
            (clear ?from))
    )

    (:action go-in
        :parameters (?h - hoist ?from - transitarea ?to - storearea)
        :precondition (and
            (at ?h ?from)
            (connected ?from ?to)
            (clear ?to))
        :effect (and
            (not (at ?h ?from))
            (at ?h ?to)
            (not (clear ?to)))
    )
)
</domain-file-storage-example>

This is an example of a PDDL instance file from the Storage domain:
<instance-file-storage-example>
(define (problem storage-101)
	(:domain Storage-Propositional)
	(:objects
		depot48-1-1 depot49-1-1 depot50-1-1 depot50-1-2 depot50-1-3 container-0-0 container-0-1 container-0-2 container-0-3 - storearea
		hoist0 - hoist
		crate0 crate1 crate2 crate3 - crate
		container0 - container
		depot48 depot49 depot50 - depot
		loadarea - transitarea
	)
	(:init
		(connected depot50-1-1 depot50-1-2)
		(connected depot50-1-2 depot50-1-3)
		(connected depot50-1-2 depot50-1-1)
		(connected depot50-1-3 depot50-1-2)
		(in depot48-1-1 depot48)
		(in depot49-1-1 depot49)
		(in depot50-1-1 depot50)
		(in depot50-1-2 depot50)
		(in depot50-1-3 depot50)
		(on crate0 container-0-0)
		(on crate1 container-0-1)
		(on crate2 container-0-2)
		(on crate3 container-0-3)
		(in crate0 container0)
		(in crate1 container0)
		(in crate2 container0)
		(in crate3 container0)
		(in container-0-0 container0)
		(in container-0-1 container0)
		(in container-0-2 container0)
		(in container-0-3 container0)
		(connected loadarea container-0-0)
		(connected container-0-0 loadarea)
		(connected loadarea container-0-1)
		(connected container-0-1 loadarea)
		(connected loadarea container-0-2)
		(connected container-0-2 loadarea)
		(connected loadarea container-0-3)
		(connected container-0-3 loadarea)
		(connected depot48-1-1 loadarea)
		(connected loadarea depot48-1-1)
		(connected depot49-1-1 loadarea)
		(connected loadarea depot49-1-1)
		(connected depot50-1-1 loadarea)
		(connected loadarea depot50-1-1)
		(clear depot48-1-1)
		(clear depot50-1-1)
		(clear depot50-1-2)
		(clear depot50-1-3)
		(at hoist0 depot49-1-1)
		(available hoist0)
	)
	(:goal
		(and
			(in crate0 depot48)
			(in crate1 depot49)
			(in crate2 depot50)
			(in crate3 depot50)
        )
	)
)
</instance-file-storage-example>

This is a plan for the Storage instance above:
<plan-storage-example>
(go-out hoist0 depot49-1-1 loadarea)
(lift hoist0 crate0 container-0-0 loadarea container0)
(drop hoist0 crate0 depot48-1-1 loadarea depot48)
(lift hoist0 crate1 container-0-1 loadarea container0)
(drop hoist0 crate1 depot49-1-1 loadarea depot49)
(lift hoist0 crate3 container-0-3 loadarea container0)
(go-in hoist0 loadarea depot50-1-1)
(drop hoist0 crate3 depot50-1-2 depot50-1-1 depot50)
(go-out hoist0 depot50-1-1 loadarea)
(lift hoist0 crate2 container-0-2 loadarea container0)
(drop hoist0 crate2 depot50-1-1 loadarea depot50)
</plan-storage-example>

This is the PDDL domain file of another domain, called Rovers, which serves as an example:
<domain-file-rovers-example>
(define (domain rover)
    (:requirements :strips :typing)
    (:types
        rover waypoint store camera mode lander objective
    )

    (:predicates
        (at ?x - rover ?y - waypoint)
        (at_lander ?x - lander ?y - waypoint)
        (can_traverse ?r - rover ?x - waypoint ?y - waypoint)
        (equipped_for_soil_analysis ?r - rover)
        (equipped_for_rock_analysis ?r - rover)
        (equipped_for_imaging ?r - rover)
        (empty ?s - store)
        (have_rock_analysis ?r - rover ?w - waypoint)
        (have_soil_analysis ?r - rover ?w - waypoint)
        (full ?s - store)
        (calibrated ?c - camera ?r - rover)
        (supports ?c - camera ?m - mode)
        (visible ?w - waypoint ?p - waypoint)
        (have_image ?r - rover ?o - objective ?m - mode)
        (communicated_soil_data ?w - waypoint)
        (communicated_rock_data ?w - waypoint)
        (communicated_image_data ?o - objective ?m - mode)
        (at_soil_sample ?w - waypoint)
        (at_rock_sample ?w - waypoint)
        (visible_from ?o - objective ?w - waypoint)
        (store_of ?s - store ?r - rover)
        (calibration_target ?i - camera ?o - objective)
        (on_board ?i - camera ?r - rover)
    )

    (:action navigate
        :parameters (?x - rover ?y - waypoint ?z - waypoint)
        :precondition (and
            (can_traverse ?x ?y ?z)
            (at ?x ?y)
            (visible ?y ?z))
        :effect (and
            (not (at ?x ?y))
            (at ?x ?z))
    )

    (:action sample_soil
        :parameters (?x - rover ?s - store ?p - waypoint)
        :precondition (and
            (at ?x ?p)
            (at_soil_sample ?p)
            (equipped_for_soil_analysis ?x)
            (store_of ?s ?x)
            (empty ?s))
        :effect (and
            (not (empty ?s))
            (full ?s)
            (have_soil_analysis ?x ?p)
            (not (at_soil_sample ?p)))
    )

    (:action sample_rock
        :parameters (?x - rover ?s - store ?p - waypoint)
        :precondition (and
            (at ?x ?p)
            (at_rock_sample ?p)
            (equipped_for_rock_analysis ?x)
            (store_of ?s ?x)
            (empty ?s))
        :effect (and
            (not (empty ?s))
            (full ?s)
            (have_rock_analysis ?x ?p)
            (not (at_rock_sample ?p)))
    )

    (:action drop
        :parameters (?x - rover ?y - store)
        :precondition (and
            (store_of ?y ?x)
            (full ?y))
        :effect (and
            (not (full ?y))
            (empty ?y))
    )

    (:action calibrate
        :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)
        :precondition (and
            (equipped_for_imaging ?r)
            (calibration_target ?i ?t)
            (at ?r ?w)
            (visible_from ?t ?w)
            (on_board ?i ?r))
        :effect (and
            (calibrated ?i ?r))
    )

    (:action take_image
        :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)
        :precondition (and
            (calibrated ?i ?r)
            (on_board ?i ?r)
            (equipped_for_imaging ?r)
            (supports ?i ?m)
            (visible_from ?o ?p)
            (at ?r ?p))
        :effect (and
            (have_image ?r ?o ?m)
            (not (calibrated ?i ?r)))
    )

    (:action communicate_soil_data
        :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)
        :precondition (and
            (at ?r ?x)
            (at_lander ?l ?y)
            (have_soil_analysis ?r ?p)
            (visible ?x ?y))
        :effect (and
            (communicated_soil_data ?p))
    )

    (:action communicate_rock_data
        :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)
        :precondition (and
            (at ?r ?x)
            (at_lander ?l ?y)
            (have_rock_analysis ?r ?p)
            (visible ?x ?y))
        :effect (and
            (communicated_rock_data ?p))
    )

    (:action communicate_image_data
        :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)
        :precondition (and
            (at ?r ?x)
            (at_lander ?l ?y)
            (have_image ?r ?o ?m)
            (visible ?x ?y))
        :effect (and
            (communicated_image_data ?o ?m))
    )
)
</domain-file-rovers-example>

This is an example of a PDDL instance file from the Rovers domain:
<instance-file-rovers-example>
(define (problem rover-04)
   (:domain rover)
   (:objects
      general - lander
      colour high_res low_res - mode
      rover1 - rover
      rover1store - store
      waypoint1 waypoint2 waypoint3 waypoint4 - waypoint
      camera1 - camera
      objective1 objective2 - objective
   )
   (:init
      (at_lander general waypoint2)
      (at rover1 waypoint1)
      (equipped_for_soil_analysis rover1)
      (equipped_for_rock_analysis rover1)
      (equipped_for_imaging rover1)
      (empty rover1store)
      (store_of rover1store rover1)
      (at_rock_sample waypoint1)
      (at_rock_sample waypoint2)
      (at_rock_sample waypoint4)
      (at_soil_sample waypoint1)
      (at_soil_sample waypoint4)
      (visible waypoint2 waypoint4)
      (visible waypoint1 waypoint2)
      (visible waypoint2 waypoint1)
      (visible waypoint3 waypoint1)
      (visible waypoint4 waypoint2)
      (visible waypoint1 waypoint3)
      (visible waypoint2 waypoint3)
      (visible waypoint3 waypoint2)
      (visible waypoint1 waypoint4)
      (visible waypoint4 waypoint1)
      (can_traverse rover1 waypoint2 waypoint4)
      (can_traverse rover1 waypoint1 waypoint2)
      (can_traverse rover1 waypoint2 waypoint1)
      (can_traverse rover1 waypoint3 waypoint1)
      (can_traverse rover1 waypoint4 waypoint2)
      (can_traverse rover1 waypoint1 waypoint3)
      (can_traverse rover1 waypoint2 waypoint3)
      (can_traverse rover1 waypoint3 waypoint2)
      (calibration_target camera1 objective1)
      (on_board camera1 rover1)
      (supports camera1 low_res)
      (supports camera1 colour)
      (supports camera1 high_res)
      (visible_from objective1 waypoint2)
      (visible_from objective2 waypoint4)
   )
   (:goal
      (and
         (communicated_rock_data waypoint1)
         (communicated_soil_data waypoint1)
         (communicated_soil_data waypoint4)
         (communicated_image_data objective1 low_res)
         (communicated_image_data objective1 colour))
   )
)
</instance-file-rovers-example>

This is a plan for the Rovers instance above:
<plan-rovers-example>
(sample_rock rover1 rover1store waypoint1)
(drop rover1 rover1store)
(communicate_rock_data rover1 general waypoint1 waypoint1 waypoint2)
(sample_soil rover1 rover1store waypoint1)
(drop rover1 rover1store)
(communicate_soil_data rover1 general waypoint1 waypoint1 waypoint2)
(navigate rover1 waypoint1 waypoint2)
(calibrate rover1 camera1 objective1 waypoint2)
(take_image rover1 waypoint2 objective1 camera1 colour)
(calibrate rover1 camera1 objective1 waypoint2)
(take_image rover1 waypoint2 objective1 camera1 low_res)
(navigate rover1 waypoint2 waypoint4)
(sample_soil rover1 rover1store waypoint4)
(communicate_soil_data rover1 general waypoint4 waypoint4 waypoint2)
(communicate_image_data rover1 general objective1 colour waypoint4 waypoint2)
(communicate_image_data rover1 general objective1 low_res waypoint4 waypoint2)
</plan-rovers-example>

Provide only the plan for the given instance. Here is a checklist to help you with your problem:
<checklist>
1) The plan must be in the same format as the examples above.
2) The plan should be preceded by the <plan> tag and should be followed by the </plan> tag.
3) The actions in the plan must be from the set of actions in the domain described above, that is, they must use the same name and the same number of parameters as one of the action schemas.
4) The plan must be valid, that is, each action must be applicable in the state it is applied, and the plan must end in a goal state.
</checklist>
</prompt>

2025-08-05 16:48:13,454 - INFO - Prompt metadata:
<prompt_metadata>
{'template': 'pddl'}
</prompt_metadata>

2025-08-05 16:48:13,454 - INFO - Sample: 1.
2025-08-05 16:48:13,454 - INFO - AFC is enabled with max remote calls: 10.
2025-08-05 16:48:49,635 - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent "HTTP/1.1 200 OK"
2025-08-05 16:48:49,638 - INFO - AFC remote call 1 is done.
2025-08-05 16:48:49,638 - INFO - 
<sample>
<response>
<plan>
(walk shed location1 bob)
(walk location1 location2 bob)
(pickup_spanner location2 spanner1 bob)
(pickup_spanner location2 spanner11 bob)
(walk location2 location3 bob)
(pickup_spanner location3 spanner2 bob)
(pickup_spanner location3 spanner3 bob)
(walk location3 location4 bob)
(walk location4 location5 bob)
(walk location5 location6 bob)
(pickup_spanner location6 spanner5 bob)
(pickup_spanner location6 spanner13 bob)
(walk location6 location7 bob)
(pickup_spanner location7 spanner9 bob)
(walk location7 location8 bob)
(walk location8 location9 bob)
(pickup_spanner location9 spanner7 bob)
(walk location9 location10 bob)
(pickup_spanner location10 spanner6 bob)
(walk location10 location11 bob)
(walk location11 location12 bob)
(pickup_spanner location12 spanner4 bob)
(pickup_spanner location12 spanner18 bob)
(walk location12 location13 bob)
(pickup_spanner location13 spanner16 bob)
(walk location13 location14 bob)
(pickup_spanner location14 spanner14 bob)
(walk location14 location15 bob)
(pickup_spanner location15 spanner20 bob)
(walk location15 location16 bob)
(walk location16 location17 bob)
(pickup_spanner location17 spanner17 bob)
(walk location17 location18 bob)
(pickup_spanner location18 spanner19 bob)
(walk location18 location19 bob)
(pickup_spanner location19 spanner12 bob)
(walk location19 location20 bob)
(pickup_spanner location20 spanner8 bob)
(pickup_spanner location20 spanner10 bob)
(walk location20 location21 bob)
(pickup_spanner location21 spanner15 bob)
(walk location21 gate bob)
(tighten_nut gate spanner1 bob nut1)
(tighten_nut gate spanner11 bob nut2)
(tighten_nut gate spanner2 bob nut3)
(tighten_nut gate spanner3 bob nut4)
(tighten_nut gate spanner5 bob nut5)
(tighten_nut gate spanner13 bob nut6)
(tighten_nut gate spanner9 bob nut7)
(tighten_nut gate spanner7 bob nut8)
(tighten_nut gate spanner6 bob nut9)
(tighten_nut gate spanner4 bob nut10)
(tighten_nut gate spanner18 bob nut11)
(tighten_nut gate spanner16 bob nut12)
(tighten_nut gate spanner14 bob nut13)
(tighten_nut gate spanner20 bob nut14)
(tighten_nut gate spanner17 bob nut15)
(tighten_nut gate spanner19 bob nut16)
(tighten_nut gate spanner12 bob nut17)
(tighten_nut gate spanner8 bob nut18)
(tighten_nut gate spanner10 bob nut19)
(tighten_nut gate spanner15 bob nut20)
</plan>
</response>
<metadata>
{'prompt_token_count': 5893, 'candidates_token_count': 812, 'total_tokens_count': 13445}
</metadata>
</sample>

