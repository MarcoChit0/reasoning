[2025-08-29 01:10:38.660341] Task: Task(domain=logistics, instance=p51)
[2025-08-29 01:10:38.660362] Model: gemini-2.5-flash-preview-05-20
[2025-08-29 01:10:38.660368] Generation Parameters: {'max_output_tokens': 65535, 'top_p': 0.95, 'temperature': 1.0, 'top_k': 64, 'thinking_config': {'thinking_budget': -1, 'include_thoughts': True}, 'wait_time': 8}
[2025-08-29 01:10:38.660390]
Prompt Metadata:
<metadata>
{'template': 'ordered_landmarks_feasible', 'action_landmarks': '(load-truck p5 t2 l2-0)\n(load-truck p5 t1 l1-1)\n(load-truck p1 t1 l1-0)\n(load-truck p19 t2 l2-1)\n(load-truck p19 t0 l0-0)\n(load-truck p17 t2 l2-1)\n(load-truck p6 t2 l2-0)\n(load-truck p10 t1 l1-0)\n(load-truck p10 t0 l0-1)\n(load-truck p16 t1 l1-1)\n(load-truck p11 t2 l2-2)\n(load-truck p11 t0 l0-0)\n(load-truck p13 t1 l1-1)\n(load-truck p20 t1 l1-1)\n(load-truck p22 t1 l1-2)\n(load-truck p26 t1 l1-0)\n(load-truck p7 t2 l2-0)\n(load-truck p7 t1 l1-1)\n(load-truck p9 t0 l0-1)\n(load-truck p0 t2 l2-0)\n(load-truck p23 t2 l2-0)\n(load-truck p23 t1 l1-2)\n(load-truck p8 t2 l2-0)\n(load-truck p8 t0 l0-1)\n(load-truck p14 t1 l1-1)\n(load-truck p15 t2 l2-2)\n(load-truck p15 t0 l0-0)\n(load-truck p12 t2 l2-1)\n(load-truck p25 t0 l0-2)\n(load-truck p18 t1 l1-0)\n(load-truck p18 t0 l0-1)\n(load-truck p3 t2 l2-0)\n(load-truck p3 t1 l1-1)\n(load-truck p4 t0 l0-0)\n(load-airplane p5 a0 l1-0)\n(load-airplane p21 a0 l1-0)\n(load-airplane p19 a0 l2-0)\n(load-airplane p6 a0 l0-0)\n(load-airplane p10 a0 l0-0)\n(load-airplane p16 a0 l1-0)\n(load-airplane p11 a0 l2-0)\n(load-airplane p13 a0 l1-0)\n(load-airplane p22 a0 l1-0)\n(load-airplane p26 a0 l2-0)\n(load-airplane p7 a0 l1-0)\n(load-airplane p0 a0 l0-0)\n(load-airplane p23 a0 l1-0)\n(load-airplane p8 a0 l0-0)\n(load-airplane p14 a0 l1-0)\n(load-airplane p15 a0 l2-0)\n(load-airplane p18 a0 l0-0)\n(load-airplane p3 a0 l1-0)\n(load-airplane p4 a0 l1-0)\n(unload-truck p5 t2 l2-1)\n(unload-truck p5 t1 l1-0)\n(unload-truck p1 t1 l1-1)\n(unload-truck p19 t2 l2-0)\n(unload-truck p19 t0 l0-1)\n(unload-truck p17 t2 l2-2)\n(unload-truck p6 t2 l2-2)\n(unload-truck p10 t1 l1-2)\n(unload-truck p10 t0 l0-0)\n(unload-truck p16 t1 l1-0)\n(unload-truck p11 t2 l2-0)\n(unload-truck p11 t0 l0-2)\n(unload-truck p13 t1 l1-0)\n(unload-truck p20 t1 l1-0)\n(unload-truck p22 t1 l1-0)\n(unload-truck p26 t1 l1-2)\n(unload-truck p7 t2 l2-2)\n(unload-truck p7 t1 l1-0)\n(unload-truck p9 t0 l0-0)\n(unload-truck p0 t2 l2-2)\n(unload-truck p23 t2 l2-2)\n(unload-truck p23 t1 l1-0)\n(unload-truck p8 t2 l2-1)\n(unload-truck p8 t0 l0-0)\n(unload-truck p14 t1 l1-0)\n(unload-truck p15 t2 l2-0)\n(unload-truck p15 t0 l0-1)\n(unload-truck p12 t2 l2-2)\n(unload-truck p25 t0 l0-0)\n(unload-truck p18 t1 l1-2)\n(unload-truck p18 t0 l0-0)\n(unload-truck p3 t2 l2-1)\n(unload-truck p3 t1 l1-0)\n(unload-truck p4 t0 l0-1)\n(unload-airplane p5 a0 l2-0)\n(unload-airplane p21 a0 l0-0)\n(unload-airplane p19 a0 l0-0)\n(unload-airplane p6 a0 l2-0)\n(unload-airplane p10 a0 l1-0)\n(unload-airplane p16 a0 l0-0)\n(unload-airplane p11 a0 l0-0)\n(unload-airplane p13 a0 l0-0)\n(unload-airplane p22 a0 l0-0)\n(unload-airplane p26 a0 l1-0)\n(unload-airplane p7 a0 l2-0)\n(unload-airplane p0 a0 l2-0)\n(unload-airplane p23 a0 l2-0)\n(unload-airplane p8 a0 l2-0)\n(unload-airplane p14 a0 l2-0)\n(unload-airplane p15 a0 l0-0)\n(unload-airplane p18 a0 l1-0)\n(unload-airplane p3 a0 l2-0)\n(unload-airplane p4 a0 l0-0)', 'num_action_landmarks': 106}
</metadata>

[2025-08-29 01:10:38.660448]
Prompt:
<prompt>
<problem-description-with-landmarks>
You are a highly skilled professor in AI planning. Your task is to generate a plan for a PDDL instance from the domain <domain>logistics</domain>.
You will be given the PDDL domain file, the PDDL instance file, and the set of action landmarks extracted from the delete relaxation of the instance.
Action landmarks are actions that must be part of any valid plan for the instance.
Since the action landmarks are extracted from the delete relaxation of the instance, they represent a subset of the action landmarks of the instance.
The action landmarks are provided in a feasible order; this means that there is at least one valid plan that could be built following the action landmarks order.
Note that the order only needs to be respected for the first appearance of each landmark in the plan.
You need to return the plan between the tags <plan> and </plan>.
You will receive two examples to help you in generating the plan.
</problem-description-with-landmarks>

This is the PDDL domain file of the logistics domain:
<domain-file>
(define (domain logistics-strips)
(:requirements :strips)
(:predicates 	(OBJ ?obj)
(TRUCK ?truck)
(LOCATION ?loc)
(AIRPLANE ?airplane)
(CITY ?city)
(AIRPORT ?airport)
(at ?obj ?loc)
(in ?obj1 ?obj2)
(in-city ?obj ?city))
(:action LOAD-TRUCK
:parameters
(?obj
?truck
?loc)
:precondition
(and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
(at ?truck ?loc) (at ?obj ?loc))
:effect
(and (not (at ?obj ?loc)) (in ?obj ?truck)))
(:action LOAD-AIRPLANE
:parameters
(?obj
?airplane
?loc)
:precondition
(and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)
(at ?obj ?loc) (at ?airplane ?loc))
:effect
(and (not (at ?obj ?loc)) (in ?obj ?airplane)))
(:action UNLOAD-TRUCK
:parameters
(?obj
?truck
?loc)
:precondition
(and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
(at ?truck ?loc) (in ?obj ?truck))
:effect
(and (not (in ?obj ?truck)) (at ?obj ?loc)))
(:action UNLOAD-AIRPLANE
:parameters
(?obj
?airplane
?loc)
:precondition
(and (OBJ ?obj) (AIRPLANE ?airplane) (LOCATION ?loc)
(in ?obj ?airplane) (at ?airplane ?loc))
:effect
(and (not (in ?obj ?airplane)) (at ?obj ?loc)))
(:action DRIVE-TRUCK
:parameters
(?truck
?loc-from
?loc-to
?city)
:precondition
(and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (CITY ?city)
(at ?truck ?loc-from)
(in-city ?loc-from ?city)
(in-city ?loc-to ?city))
:effect
(and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))
(:action FLY-AIRPLANE
:parameters
(?airplane
?loc-from
?loc-to)
:precondition
(and (AIRPLANE ?airplane) (AIRPORT ?loc-from) (AIRPORT ?loc-to)
(at ?airplane ?loc-from))
:effect
(and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to)))
)
</domain-file>

This is the PDDL instance file, for which you need to generate a plan:
<instance-file>
(define (problem logistics-c3-s3-p27-a1)
(:domain logistics-strips)
(:objects a0
c0 c1 c2
t0 t1 t2
l0-0 l0-1 l0-2 l1-0 l1-1 l1-2 l2-0 l2-1 l2-2
p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17 p18 p19 p20 p21 p22 p23 p24 p25 p26
)
(:init
(AIRPLANE a0)
(CITY c0)
(CITY c1)
(CITY c2)
(TRUCK t0)
(TRUCK t1)
(TRUCK t2)
(LOCATION l0-0)
(in-city  l0-0 c0)
(LOCATION l0-1)
(in-city  l0-1 c0)
(LOCATION l0-2)
(in-city  l0-2 c0)
(LOCATION l1-0)
(in-city  l1-0 c1)
(LOCATION l1-1)
(in-city  l1-1 c1)
(LOCATION l1-2)
(in-city  l1-2 c1)
(LOCATION l2-0)
(in-city  l2-0 c2)
(LOCATION l2-1)
(in-city  l2-1 c2)
(LOCATION l2-2)
(in-city  l2-2 c2)
(AIRPORT l0-0)
(AIRPORT l1-0)
(AIRPORT l2-0)
(OBJ p0)
(OBJ p1)
(OBJ p2)
(OBJ p3)
(OBJ p4)
(OBJ p5)
(OBJ p6)
(OBJ p7)
(OBJ p8)
(OBJ p9)
(OBJ p10)
(OBJ p11)
(OBJ p12)
(OBJ p13)
(OBJ p14)
(OBJ p15)
(OBJ p16)
(OBJ p17)
(OBJ p18)
(OBJ p19)
(OBJ p20)
(OBJ p21)
(OBJ p22)
(OBJ p23)
(OBJ p24)
(OBJ p25)
(OBJ p26)
(at t0 l0-0)
(at t1 l1-1)
(at t2 l2-0)
(at p0 l0-0)
(at p1 l1-0)
(at p2 l1-1)
(at p3 l1-1)
(at p4 l1-0)
(at p5 l1-1)
(at p6 l0-0)
(at p7 l1-1)
(at p8 l0-1)
(at p9 l0-1)
(at p10 l0-1)
(at p11 l2-2)
(at p12 l2-1)
(at p13 l1-1)
(at p14 l1-1)
(at p15 l2-2)
(at p16 l1-1)
(at p17 l2-1)
(at p18 l0-1)
(at p19 l2-1)
(at p20 l1-1)
(at p21 l1-0)
(at p22 l1-2)
(at p23 l1-2)
(at p24 l1-1)
(at p25 l0-2)
(at p26 l2-0)
(at a0 l2-0)
)
(:goal
(and
(at p0 l2-2)
(at p1 l1-1)
(at p2 l1-1)
(at p3 l2-1)
(at p4 l0-1)
(at p5 l2-1)
(at p6 l2-2)
(at p7 l2-2)
(at p8 l2-1)
(at p9 l0-0)
(at p10 l1-2)
(at p11 l0-2)
(at p12 l2-2)
(at p13 l0-0)
(at p14 l2-0)
(at p15 l0-1)
(at p16 l0-0)
(at p17 l2-2)
(at p18 l1-2)
(at p19 l0-1)
(at p20 l1-0)
(at p21 l0-0)
(at p22 l0-0)
(at p23 l2-2)
(at p24 l1-1)
(at p25 l0-0)
(at p26 l1-2)
)
)
)
</instance-file>

This is a set of action landmarks for the instance you need to generate a plan for:
<action-landmarks-set>
(load-truck p5 t2 l2-0)
(load-truck p5 t1 l1-1)
(load-truck p1 t1 l1-0)
(load-truck p19 t2 l2-1)
(load-truck p19 t0 l0-0)
(load-truck p17 t2 l2-1)
(load-truck p6 t2 l2-0)
(load-truck p10 t1 l1-0)
(load-truck p10 t0 l0-1)
(load-truck p16 t1 l1-1)
(load-truck p11 t2 l2-2)
(load-truck p11 t0 l0-0)
(load-truck p13 t1 l1-1)
(load-truck p20 t1 l1-1)
(load-truck p22 t1 l1-2)
(load-truck p26 t1 l1-0)
(load-truck p7 t2 l2-0)
(load-truck p7 t1 l1-1)
(load-truck p9 t0 l0-1)
(load-truck p0 t2 l2-0)
(load-truck p23 t2 l2-0)
(load-truck p23 t1 l1-2)
(load-truck p8 t2 l2-0)
(load-truck p8 t0 l0-1)
(load-truck p14 t1 l1-1)
(load-truck p15 t2 l2-2)
(load-truck p15 t0 l0-0)
(load-truck p12 t2 l2-1)
(load-truck p25 t0 l0-2)
(load-truck p18 t1 l1-0)
(load-truck p18 t0 l0-1)
(load-truck p3 t2 l2-0)
(load-truck p3 t1 l1-1)
(load-truck p4 t0 l0-0)
(load-airplane p5 a0 l1-0)
(load-airplane p21 a0 l1-0)
(load-airplane p19 a0 l2-0)
(load-airplane p6 a0 l0-0)
(load-airplane p10 a0 l0-0)
(load-airplane p16 a0 l1-0)
(load-airplane p11 a0 l2-0)
(load-airplane p13 a0 l1-0)
(load-airplane p22 a0 l1-0)
(load-airplane p26 a0 l2-0)
(load-airplane p7 a0 l1-0)
(load-airplane p0 a0 l0-0)
(load-airplane p23 a0 l1-0)
(load-airplane p8 a0 l0-0)
(load-airplane p14 a0 l1-0)
(load-airplane p15 a0 l2-0)
(load-airplane p18 a0 l0-0)
(load-airplane p3 a0 l1-0)
(load-airplane p4 a0 l1-0)
(unload-truck p5 t2 l2-1)
(unload-truck p5 t1 l1-0)
(unload-truck p1 t1 l1-1)
(unload-truck p19 t2 l2-0)
(unload-truck p19 t0 l0-1)
(unload-truck p17 t2 l2-2)
(unload-truck p6 t2 l2-2)
(unload-truck p10 t1 l1-2)
(unload-truck p10 t0 l0-0)
(unload-truck p16 t1 l1-0)
(unload-truck p11 t2 l2-0)
(unload-truck p11 t0 l0-2)
(unload-truck p13 t1 l1-0)
(unload-truck p20 t1 l1-0)
(unload-truck p22 t1 l1-0)
(unload-truck p26 t1 l1-2)
(unload-truck p7 t2 l2-2)
(unload-truck p7 t1 l1-0)
(unload-truck p9 t0 l0-0)
(unload-truck p0 t2 l2-2)
(unload-truck p23 t2 l2-2)
(unload-truck p23 t1 l1-0)
(unload-truck p8 t2 l2-1)
(unload-truck p8 t0 l0-0)
(unload-truck p14 t1 l1-0)
(unload-truck p15 t2 l2-0)
(unload-truck p15 t0 l0-1)
(unload-truck p12 t2 l2-2)
(unload-truck p25 t0 l0-0)
(unload-truck p18 t1 l1-2)
(unload-truck p18 t0 l0-0)
(unload-truck p3 t2 l2-1)
(unload-truck p3 t1 l1-0)
(unload-truck p4 t0 l0-1)
(unload-airplane p5 a0 l2-0)
(unload-airplane p21 a0 l0-0)
(unload-airplane p19 a0 l0-0)
(unload-airplane p6 a0 l2-0)
(unload-airplane p10 a0 l1-0)
(unload-airplane p16 a0 l0-0)
(unload-airplane p11 a0 l0-0)
(unload-airplane p13 a0 l0-0)
(unload-airplane p22 a0 l0-0)
(unload-airplane p26 a0 l1-0)
(unload-airplane p7 a0 l2-0)
(unload-airplane p0 a0 l2-0)
(unload-airplane p23 a0 l2-0)
(unload-airplane p8 a0 l2-0)
(unload-airplane p14 a0 l2-0)
(unload-airplane p15 a0 l0-0)
(unload-airplane p18 a0 l1-0)
(unload-airplane p3 a0 l2-0)
(unload-airplane p4 a0 l0-0)
</action-landmarks-set>

This is the PDDL domain file of another domain, called storage, which serves as an example:
<domain-file-storage-example>
(define (domain Storage-Propositional)
(:requirements :typing)
(:types
hoist crate place area - object
container depot - place
storearea transitarea - area
)
(:predicates
(clear ?s - storearea)
(in ?x -
(either storearea crate) ?p - place)
(available ?h - hoist)
(lifting ?h - hoist ?c - crate)
(at ?h - hoist ?a - area)
(on ?c - crate ?s - storearea)
(connected ?a1 ?a2 - area)
(compatible ?c1 ?c2 - crate)
)
(:action lift
:parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
:precondition (and
(connected ?a1 ?a2)
(at ?h ?a2)
(available ?h)
(on ?c ?a1)
(in ?a1 ?p))
:effect (and
(not (on ?c ?a1))
(clear ?a1)
(not (available ?h))
(lifting ?h ?c)
(not (in ?c ?p)))
)
(:action drop
:parameters (?h - hoist ?c - crate ?a1 - storearea ?a2 - area ?p - place)
:precondition (and
(connected ?a1 ?a2)
(at ?h ?a2)
( lifting ?h ?c)
(clear ?a1)
(in ?a1 ?p))
:effect (and
(not (lifting ?h ?c))
(available ?h)
(not (clear ?a1))
(on ?c ?a1)
(in ?c ?p))
)
(:action move
:parameters (?h - hoist ?from ?to - storearea)
:precondition (and
(at ?h ?from)
(clear ?to)
(connected ?from ?to))
:effect (and
(not (at ?h ?from))
(at ?h ?to)
(not (clear ?to))
(clear ?from))
)
(:action go-out
:parameters (?h - hoist ?from - storearea ?to - transitarea)
:precondition (and
(at ?h ?from)
(connected ?from ?to))
:effect (and
(not (at ?h ?from))
(at ?h ?to)
(clear ?from))
)
(:action go-in
:parameters (?h - hoist ?from - transitarea ?to - storearea)
:precondition (and
(at ?h ?from)
(connected ?from ?to)
(clear ?to))
:effect (and
(not (at ?h ?from))
(at ?h ?to)
(not (clear ?to)))
)
)
</domain-file-storage-example>

This is an example of a PDDL instance file from the storage domain:
<instance-file-storage-example>
(define (problem storage-101)
(:domain Storage-Propositional)
(:objects
depot48-1-1 depot49-1-1 depot50-1-1 depot50-1-2 depot50-1-3 container-0-0 container-0-1 container-0-2 container-0-3 - storearea
hoist0 - hoist
crate0 crate1 crate2 crate3 - crate
container0 - container
depot48 depot49 depot50 - depot
loadarea - transitarea
)
(:init
(connected depot50-1-1 depot50-1-2)
(connected depot50-1-2 depot50-1-3)
(connected depot50-1-2 depot50-1-1)
(connected depot50-1-3 depot50-1-2)
(in depot48-1-1 depot48)
(in depot49-1-1 depot49)
(in depot50-1-1 depot50)
(in depot50-1-2 depot50)
(in depot50-1-3 depot50)
(on crate0 container-0-0)
(on crate1 container-0-1)
(on crate2 container-0-2)
(on crate3 container-0-3)
(in crate0 container0)
(in crate1 container0)
(in crate2 container0)
(in crate3 container0)
(in container-0-0 container0)
(in container-0-1 container0)
(in container-0-2 container0)
(in container-0-3 container0)
(connected loadarea container-0-0)
(connected container-0-0 loadarea)
(connected loadarea container-0-1)
(connected container-0-1 loadarea)
(connected loadarea container-0-2)
(connected container-0-2 loadarea)
(connected loadarea container-0-3)
(connected container-0-3 loadarea)
(connected depot48-1-1 loadarea)
(connected loadarea depot48-1-1)
(connected depot49-1-1 loadarea)
(connected loadarea depot49-1-1)
(connected depot50-1-1 loadarea)
(connected loadarea depot50-1-1)
(clear depot48-1-1)
(clear depot50-1-1)
(clear depot50-1-2)
(clear depot50-1-3)
(at hoist0 depot49-1-1)
(available hoist0)
)
(:goal
(and
(in crate0 depot48)
(in crate1 depot49)
(in crate2 depot50)
(in crate3 depot50)
)
)
)
</instance-file-storage-example>

This is a set of action landmarks for the storage instance above:
<action-landmarks-set-storage-example>
(go-out hoist0 depot49-1-1 loadarea)
(lift hoist0 crate0 container-0-0 loadarea container0)
(drop hoist0 crate0 depot48-1-1 loadarea depot48)
(lift hoist0 crate1 container-0-1 loadarea container0)
(drop hoist0 crate1 depot49-1-1 loadarea depot49)
(lift hoist0 crate3 container-0-3 loadarea container0)
(lift hoist0 crate2 container-0-2 loadarea container0)
</action-landmarks-set-storage-example>

This is a plan for the storage instance above:
<plan-storage-example>
(go-out hoist0 depot49-1-1 loadarea)
(lift hoist0 crate0 container-0-0 loadarea container0)
(drop hoist0 crate0 depot48-1-1 loadarea depot48)
(lift hoist0 crate1 container-0-1 loadarea container0)
(drop hoist0 crate1 depot49-1-1 loadarea depot49)
(lift hoist0 crate3 container-0-3 loadarea container0)
(go-in hoist0 loadarea depot50-1-1)
(drop hoist0 crate3 depot50-1-2 depot50-1-1 depot50)
(go-out hoist0 depot50-1-1 loadarea)
(lift hoist0 crate2 container-0-2 loadarea container0)
(drop hoist0 crate2 depot50-1-1 loadarea depot50)
</plan-storage-example>

This is the PDDL domain file of another domain, called rover, which serves as an example:
<domain-file-rover-example>
(define (domain rover)
(:requirements :strips :typing)
(:types
rover waypoint store camera mode lander objective
)
(:predicates
(at ?x - rover ?y - waypoint)
(at_lander ?x - lander ?y - waypoint)
(can_traverse ?r - rover ?x - waypoint ?y - waypoint)
(equipped_for_soil_analysis ?r - rover)
(equipped_for_rock_analysis ?r - rover)
(equipped_for_imaging ?r - rover)
(empty ?s - store)
(have_rock_analysis ?r - rover ?w - waypoint)
(have_soil_analysis ?r - rover ?w - waypoint)
(full ?s - store)
(calibrated ?c - camera ?r - rover)
(supports ?c - camera ?m - mode)
(visible ?w - waypoint ?p - waypoint)
(have_image ?r - rover ?o - objective ?m - mode)
(communicated_soil_data ?w - waypoint)
(communicated_rock_data ?w - waypoint)
(communicated_image_data ?o - objective ?m - mode)
(at_soil_sample ?w - waypoint)
(at_rock_sample ?w - waypoint)
(visible_from ?o - objective ?w - waypoint)
(store_of ?s - store ?r - rover)
(calibration_target ?i - camera ?o - objective)
(on_board ?i - camera ?r - rover)
)
(:action navigate
:parameters (?x - rover ?y - waypoint ?z - waypoint)
:precondition (and
(can_traverse ?x ?y ?z)
(at ?x ?y)
(visible ?y ?z))
:effect (and
(not (at ?x ?y))
(at ?x ?z))
)
(:action sample_soil
:parameters (?x - rover ?s - store ?p - waypoint)
:precondition (and
(at ?x ?p)
(at_soil_sample ?p)
(equipped_for_soil_analysis ?x)
(store_of ?s ?x)
(empty ?s))
:effect (and
(not (empty ?s))
(full ?s)
(have_soil_analysis ?x ?p)
(not (at_soil_sample ?p)))
)
(:action sample_rock
:parameters (?x - rover ?s - store ?p - waypoint)
:precondition (and
(at ?x ?p)
(at_rock_sample ?p)
(equipped_for_rock_analysis ?x)
(store_of ?s ?x)
(empty ?s))
:effect (and
(not (empty ?s))
(full ?s)
(have_rock_analysis ?x ?p)
(not (at_rock_sample ?p)))
)
(:action drop
:parameters (?x - rover ?y - store)
:precondition (and
(store_of ?y ?x)
(full ?y))
:effect (and
(not (full ?y))
(empty ?y))
)
(:action calibrate
:parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)
:precondition (and
(equipped_for_imaging ?r)
(calibration_target ?i ?t)
(at ?r ?w)
(visible_from ?t ?w)
(on_board ?i ?r))
:effect (and
(calibrated ?i ?r))
)
(:action take_image
:parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)
:precondition (and
(calibrated ?i ?r)
(on_board ?i ?r)
(equipped_for_imaging ?r)
(supports ?i ?m)
(visible_from ?o ?p)
(at ?r ?p))
:effect (and
(have_image ?r ?o ?m)
(not (calibrated ?i ?r)))
)
(:action communicate_soil_data
:parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)
:precondition (and
(at ?r ?x)
(at_lander ?l ?y)
(have_soil_analysis ?r ?p)
(visible ?x ?y))
:effect (and
(communicated_soil_data ?p))
)
(:action communicate_rock_data
:parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)
:precondition (and
(at ?r ?x)
(at_lander ?l ?y)
(have_rock_analysis ?r ?p)
(visible ?x ?y))
:effect (and
(communicated_rock_data ?p))
)
(:action communicate_image_data
:parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)
:precondition (and
(at ?r ?x)
(at_lander ?l ?y)
(have_image ?r ?o ?m)
(visible ?x ?y))
:effect (and
(communicated_image_data ?o ?m))
)
)
</domain-file-rover-example>

This is an example of a PDDL instance file from the rover domain:
<instance-file-rover-example>
(define (problem rover-04)
(:domain rover)
(:objects
general - lander
colour high_res low_res - mode
rover1 - rover
rover1store - store
waypoint1 waypoint2 waypoint3 waypoint4 - waypoint
camera1 - camera
objective1 objective2 - objective
)
(:init
(at_lander general waypoint2)
(at rover1 waypoint1)
(equipped_for_soil_analysis rover1)
(equipped_for_rock_analysis rover1)
(equipped_for_imaging rover1)
(empty rover1store)
(store_of rover1store rover1)
(at_rock_sample waypoint1)
(at_rock_sample waypoint2)
(at_rock_sample waypoint4)
(at_soil_sample waypoint1)
(at_soil_sample waypoint4)
(visible waypoint2 waypoint4)
(visible waypoint1 waypoint2)
(visible waypoint2 waypoint1)
(visible waypoint3 waypoint1)
(visible waypoint4 waypoint2)
(visible waypoint1 waypoint3)
(visible waypoint2 waypoint3)
(visible waypoint3 waypoint2)
(visible waypoint1 waypoint4)
(visible waypoint4 waypoint1)
(can_traverse rover1 waypoint2 waypoint4)
(can_traverse rover1 waypoint1 waypoint2)
(can_traverse rover1 waypoint2 waypoint1)
(can_traverse rover1 waypoint3 waypoint1)
(can_traverse rover1 waypoint4 waypoint2)
(can_traverse rover1 waypoint1 waypoint3)
(can_traverse rover1 waypoint2 waypoint3)
(can_traverse rover1 waypoint3 waypoint2)
(calibration_target camera1 objective1)
(on_board camera1 rover1)
(supports camera1 low_res)
(supports camera1 colour)
(supports camera1 high_res)
(visible_from objective1 waypoint2)
(visible_from objective2 waypoint4)
)
(:goal
(and
(communicated_rock_data waypoint1)
(communicated_soil_data waypoint1)
(communicated_soil_data waypoint4)
(communicated_image_data objective1 low_res)
(communicated_image_data objective1 colour))
)
)
</instance-file-rover-example>

This is a set of action landmarks for the rover instance above:
<action-landmarks-set-rover-example>
(sample_soil rover1 rover1store waypoint1)
(sample_rock rover1 rover1store waypoint1)
(calibrate rover1 camera1 objective1 waypoint2)
(take_image rover1 waypoint2 objective1 camera1 colour)
(take_image rover1 waypoint2 objective1 camera1 low_res)
(navigate rover1 waypoint2 waypoint4)
(sample_soil rover1 rover1store waypoint4)
</action-landmarks-set-rover-example>

This is a plan for the rover instance above:
<plan-rover-example>
(sample_soil rover1 rover1store waypoint1)
(drop rover1 rover1store)
(communicate_soil_data rover1 general waypoint1 waypoint1 waypoint2)
(sample_rock rover1 rover1store waypoint1)
(drop rover1 rover1store)
(communicate_rock_data rover1 general waypoint1 waypoint1 waypoint2)
(navigate rover1 waypoint1 waypoint2)
(calibrate rover1 camera1 objective1 waypoint2)
(take_image rover1 waypoint2 objective1 camera1 colour)
(calibrate rover1 camera1 objective1 waypoint2)
(take_image rover1 waypoint2 objective1 camera1 low_res)
(navigate rover1 waypoint2 waypoint4)
(sample_soil rover1 rover1store waypoint4)
(communicate_soil_data rover1 general waypoint4 waypoint4 waypoint2)
(communicate_image_data rover1 general objective1 colour waypoint4 waypoint2)
(communicate_image_data rover1 general objective1 low_res waypoint4 waypoint2)
</plan-rover-example>

Provide only the plan for the given instance. Here is a checklist to help you with your problem:
<checklist>
1) The plan must be in the same format as the examples above.
2) The plan should be preceded by the <plan> tag and should be followed by the </plan> tag.
3) The actions in the plan must be from the set of actions in the domain described above, that is, they must use the same name and the same number of parameters as one of the action schemas.
4) The plan must be valid, that is, each action must be applicable in the state it is applied, and the plan must end in a goal state.
</checklist>
</prompt>
